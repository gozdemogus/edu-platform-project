@{
    Layout = "~/Views/Shared/_AreaLayout.cshtml";
}

<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>



<script>$(document).ready(() => {

        var connection = new signalR.HubConnectionBuilder().withAutomaticReconnect([1000, 2000, 3000, 8000]).withUrl("https://localhost:5000/AnalyticsHub").build();

        connection.start().then(function () {
            connection.invoke("DataForAll").catch(function (err) {
                return console.error(err.toString());
            });
            //connection.invoke("GetAnalytics").catch(function (err) {
            //    return console.error(err.toString());
            //});
            //connection.invoke("GetTrafficSources").catch(function (err) {
            //    return console.error(err.toString());
            //});

        }).catch(function (err) {
            return console.error(err.toString());
        });

        connection.on("ReceiveAnalytics", function (analytics) {
            //  console.log(time);
            //  $("#ti").text(analytics.time);

            $("#customers").text(analytics.customers);
            $("#orders").text(analytics.orders);
            $("#conversion").text(analytics.conversion);
            $("#earnings").text(analytics.earnings);

            //var xValues = [200,400,600,800];
            //var yValues = [5,10,15,analytics.customers];

            //new Chart("myChart2", {
            //    type: "line",
            //    data: {
            //        labels: xValues,
            //        datasets: [{
            //            fill: false,
            //            lineTension: 0,
            //            backgroundColor: "rgba(0,0,255,1.0)",
            //            borderColor: "rgba(0,0,255,0.1)",
            //            data: yValues
            //        }]
            //    },
            //    options: {
            //        legend: { display: false },
            //        scales: {
            //            yAxes: [{ ticks: { min: 6, max: 16 } }],
            //        }
            //    }
            //});


        });


        connection.on("ReceiveTrafficSources", function (trafficSources, tot, goal) {
            //console.log(trafficSources);
            var total = 0;
            var trafficSourcesHTML = "";
            var legendHTML = "";
            trafficSources.forEach(function (source) {
                console.log(source);
                totalCount = source.totalcount;
                total += source.Total;
                trafficSourcesHTML += `<div class="progress-bar  bg-${source.color}" role="progressbar" style="width: ${source.total}%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>`;
                legendHTML += `<div class="d-flex justify-content-between legend-label">
                            <div><span class="bg-${source.color}"></span>${source.name}</div>
                            <div>${source.total}</div>
                        </div>`;
            });
            //   console.log(legendHTML);
            //   console.log(tot);
            $("#chart-legends").html(legendHTML);
            $("#progressbar").html(trafficSourcesHTML);
            $("#total").html(tot);
            $("#goal").html(goal);
        });



    connection.on("ChartValues", function (test2, shuffleNames) {
        console.log(test2)

        var xValues = [shuffleNames[0], shuffleNames[1], shuffleNames[2], shuffleNames[3], shuffleNames[4] ];
        var yValues = [test2[0], test2[1], test2[2], test2[3], test2[4]];
    var barColors = ["black", "lime", "blue", "orange", "magenta"];

    new Chart("myChart", {
        type: "bar",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: barColors,
                data: yValues
            }]
        },
        options: {
            legend: { display: false },
            title: {
                display: true,
                text: "This Week's Top Programming Languages"
            }
        }
    });

    });

    });</script>



<div class="row">
    <div class="col-sm-12 mb-4 mb-xl-0">
        <h4 class="font-weight-bold text-dark">Hi @User.Identity.Name, welcome back! </h4>
        <p><span id="ti"></span>@DateTime.Now.ToShortDateString()</p>
    </div>
</div>
<div class="row mt-3">
    <div class="col-xl-3 flex-column d-flex grid-margin stretch-card">
        <div class="row flex-grow">
            <div class="col-sm-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Customers</h4>
                        <p>Conversion: <span id="conversion"></span></p>
                        <h1 class="text-dark font-weight-bold mb-2"><i class="icon icon-eye" style="color:cyan"></i> <span id="customers"></span> </h1>
                        @*<canvas id="myChart2" style="width:100%;max-width:600px"></canvas>*@

                    </div>
                </div>
            </div>
            <div class="col-sm-12 stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Orders</h4>
                        <p>Earnings: <span id="earnings"></span></p>
                        <h1 class="text-dark font-weight-bold mb-2"><i class="icon icon-marquee-plus" style="color:lawngreen"></i> <span id="orders"></span></h1>

                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="col-xl-9 d-flex grid-margin stretch-card">
        <div class="card">


            @await Component.InvokeAsync("ToDoList")

        </div>
    </div>
</div>
<div class="row">
    <div class="col-xl-4 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between mb-3">
                    <h4 class="card-title">Market Trends</h4>
                </div>
                <canvas id="myChart" style="width:100%;max-width:600px"></canvas>

            </div>
        </div>
    </div>
    <div class="col-xl-4 grid-margin stretch-card">


        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Traffic Sources</h4>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="d-flex justify-content-between mt-2 text-dark mb-2">
                            <div><span class="font-weight-bold" id="total"></span> per seconds</div>
                            <div><span class="font-weight-bold" id="goal"></span></div>
                        </div>
                        <div class="progress progress-md grouped mb-2" id="progressbar">
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="traffic-source-legend" id="chart-legends">
                            <div class="d-flex justify-content-between mb-1 mt-2">
                                <div class="font-weight-bold">SOURCE</div>
                                <div class="font-weight-bold">TOTAL</div>
                            </div>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-4 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title mb-3">Recent Activity</h4>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="text-dark">
                            @await Component.InvokeAsync("Messages")

                         
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


